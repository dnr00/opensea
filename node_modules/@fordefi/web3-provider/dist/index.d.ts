import { RpcSchema, Quantity, Address, Hash, Hex, TypedDataDefinition, EIP1474Methods, EIP1193EventMap, TransactionRequest, EIP1193Provider, EIP1193Events } from 'viem';
export { EIP1193EventMap } from 'viem';
import { EventEmitter } from 'node:events';

type OmitFromArray<T extends RpcSchema, Condition extends T[number]['Method']> = {
    [K in keyof T]: T[K] extends {
        Method: Condition;
    } ? never : {
        Method: T[K]['Method'];
        Parameters: T[K]['Parameters'];
        ReturnType: T[K]['ReturnType'];
    };
} extends infer R ? {
    [K in keyof R]: R[K];
} : never;

type FordefiWeb3TransactionRequest = TransactionRequest<bigint | Hex>;
/** Spec of all methods implemented by Fordefi. */
type FordefiRpcSchema = readonly [
    {
        Method: 'eth_chainId';
        Parameters?: undefined;
        ReturnType: Quantity;
    },
    {
        Method: 'eth_accounts';
        Parameters?: undefined;
        ReturnType: Address[];
    },
    {
        Method: 'eth_requestAccounts';
        Parameters?: undefined;
        ReturnType: Address[];
    },
    {
        Method: 'eth_sendTransaction';
        Parameters: [transaction: FordefiWeb3TransactionRequest];
        ReturnType: Hash;
    },
    {
        Method: 'eth_signTransaction';
        Parameters: [request: FordefiWeb3TransactionRequest];
        ReturnType: Hex;
    },
    {
        Method: 'personal_sign';
        Parameters: [data: Hex, address: Address];
        ReturnType: Hex;
    },
    {
        Method: 'eth_signTypedData';
        Parameters: [address: Address, message: TypedDataDefinition];
        ReturnType: Hex;
    },
    {
        Method: 'eth_signTypedData_v3';
        Parameters: [address: Address, message: TypedDataDefinition];
        ReturnType: Hex;
    },
    {
        Method: 'eth_signTypedData_v4';
        Parameters: [address: Address, message: TypedDataDefinition];
        ReturnType: Hex;
    }
];
/** Union of names of all methods implemented by Fordefi. */
type FordefiMethodName = FordefiRpcSchema[number]['Method'];
/** @interface */
type NonFordefiRpcSchema = OmitFromArray<EIP1474Methods, 'eth_chainId' | 'eth_accounts' | 'eth_requestAccounts' | 'eth_sendTransaction' | 'eth_signTransaction' | 'personal_sign'>;
/** Method name and its arguments. Similar to `RequestArgs<S, M>` but doesn't support unknown methods. */
type MethodArgs<S extends RpcSchema, M extends S[number]['Method']> = S extends FordefiRpcSchema ? {
    method: M;
} & (Extract<S[number], {
    Method: M;
    Parameters?: undefined;
}> extends never ? {
    params: Extract<S[number], {
        Method: M;
    }>['Parameters'];
} : {
    params?: never;
}) : {
    params?: never;
};
/**
 * Arguments for the `request()` method.
 * Fordefi methods and other EIP-1474 methods are typed, other methods are treated as having unknown parameters and return type.
 *
 * @template S A schema of supported methods.
 *   Each method's schema is represented with `Method, Params, ReturnType`.
 *   Fordefi methods are available in {@link FordefiRpcSchema}, other EIP-1474 methods are available in {@link NonFordefiRpcSchema}.
 * @template M The method name as defined in spec's `Method`.
 * @interface
 */
type RequestArgs<S extends RpcSchema = RpcSchema, M extends S[number]['Method'] | unknown = unknown> = S extends FordefiRpcSchema ? M extends S[number]['Method'] ? MethodArgs<S, M> : {
    method: string;
    params?: unknown | undefined;
} : {
    method: string;
    params?: unknown | undefined;
};
/**
 * The return type of a method.
 * @internal
 */
type MethodReturnType<S extends RpcSchema = FordefiRpcSchema, M extends S[number]['Method'] | unknown = S[number]['Method'] | unknown> = M extends S[number]['Method'] ? Extract<S[number], {
    Method: M;
}> extends never ? unknown : Extract<S[number], {
    Method: M;
}>['ReturnType'] : unknown;
/** The EIP-1193 interface the provider implements based on the spec. */
type FordefiEIP1193Provider = Omit<EIP1193Provider, 'request'> & {
    request<S extends RpcSchema = FordefiRpcSchema, M extends S[number]['Method'] = S[number]['Method']>(args: RequestArgs<S, M>): Promise<MethodReturnType<S, M>>;
};
/** @internal */
type EIP1193EventCallbackParams = {
    [K in keyof EIP1193EventMap]: Parameters<EIP1193EventMap[K]>;
};
/** Current state of the provider - consistent with the emitted 'connect' and 'disconnect' events. */
type ConnectivityStatus = 'connected' | 'connecting' | 'disconnected';

/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The EVM chain ID can be either one of those supported by the default chains above or a custom chain ID if one was added to your organization. <ul><li>1=`ethereum_mainnet`<li>5=`ethereum_goerli`<li>10=`optimism_mainnet`<li>16=`flare_testnet`<li>56=`bsc_mainnet`<li>100=`gnosis_mainnet`<li>137=`polygon_mainnet`<li>169=`manta_pacific_mainnet`<li>250=`fantom_mainnet`<li>324=`zksync_era_mainnet`<li>1030=`conflux_mainnet`<li>1100=`dymension_mainnet`<li>1101=`polygon_zkevm_mainnet`<li>1329=`sei_mainnet`<li>1729=`reya_mainnet`<li>2222=`kava_mainnet`<li>4200=`merlin_mainnet`<li>5000=`mantle_mainnet`<li>7000=`zeta_mainnet`<li>7700=`canto_mainnet`<li>8453=`base_mainnet`<li>17000=`ethereum_holesky`<li>80001=`polygon_mumbai`<li>42161=`arbitrum_mainnet`<li>43114=`avalanche_chain`<li>59144=`linea_mainnet`<li>81457=`blast_mainnet`<li>421614=`arbitrum_sepolia`<li>534352=`scroll_mainnet`<li>660279=`xai_mainnet`<li>810180=`zklink_nova_mainnet`<li>11155111=`ethereum_sepolia`</ul>
 * @export
 */
declare const EvmChainId$1: {
    readonly NUMBER_1: 1;
    readonly NUMBER_5: 5;
    readonly NUMBER_10: 10;
    readonly NUMBER_16: 16;
    readonly NUMBER_56: 56;
    readonly NUMBER_100: 100;
    readonly NUMBER_137: 137;
    readonly NUMBER_169: 169;
    readonly NUMBER_250: 250;
    readonly NUMBER_324: 324;
    readonly NUMBER_1030: 1030;
    readonly NUMBER_1100: 1100;
    readonly NUMBER_1101: 1101;
    readonly NUMBER_1329: 1329;
    readonly NUMBER_1729: 1729;
    readonly NUMBER_2222: 2222;
    readonly NUMBER_4200: 4200;
    readonly NUMBER_5000: 5000;
    readonly NUMBER_7000: 7000;
    readonly NUMBER_7700: 7700;
    readonly NUMBER_8453: 8453;
    readonly NUMBER_17000: 17000;
    readonly NUMBER_80001: 80001;
    readonly NUMBER_42161: 42161;
    readonly NUMBER_43114: 43114;
    readonly NUMBER_59144: 59144;
    readonly NUMBER_81457: 81457;
    readonly NUMBER_421614: 421614;
    readonly NUMBER_534352: 534352;
    readonly NUMBER_660279: 660279;
    readonly NUMBER_810180: 810180;
    readonly NUMBER_11155111: 11155111;
};
type EvmChainId$1 = typeof EvmChainId$1[keyof typeof EvmChainId$1];

/**
 * Fordefi API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The unique EVM chain ID. </br>Can be either one of those supported by the default chains above or a custom numeric chain ID `evm_<numeric_chain_id>` if one was added to your organization.
 * @export
 */
declare const EvmChainUniqueId$1: {
    readonly _1: "evm_1";
    readonly _5: "evm_5";
    readonly _10: "evm_10";
    readonly _16: "evm_16";
    readonly _56: "evm_56";
    readonly _100: "evm_100";
    readonly _137: "evm_137";
    readonly _169: "evm_169";
    readonly _250: "evm_250";
    readonly _324: "evm_324";
    readonly _1030: "evm_1030";
    readonly _1100: "evm_1100";
    readonly _1101: "evm_1101";
    readonly _1329: "evm_1329";
    readonly _1729: "evm_1729";
    readonly _2222: "evm_2222";
    readonly _4200: "evm_4200";
    readonly _5000: "evm_5000";
    readonly _7000: "evm_7000";
    readonly _7700: "evm_7700";
    readonly _8453: "evm_8453";
    readonly _17000: "evm_17000";
    readonly _80001: "evm_80001";
    readonly _42161: "evm_42161";
    readonly _43114: "evm_43114";
    readonly _59144: "evm_59144";
    readonly _81457: "evm_81457";
    readonly _421614: "evm_421614";
    readonly _534352: "evm_534352";
    readonly _660279: "evm_660279";
    readonly _810180: "evm_810180";
    readonly _11155111: "evm_11155111";
    readonly ethereumMainnet: "evm_ethereum_mainnet";
    readonly ethereumGoerli: "evm_ethereum_goerli";
    readonly optimismMainnet: "evm_optimism_mainnet";
    readonly flareTestnet: "evm_flare_testnet";
    readonly bscMainnet: "evm_bsc_mainnet";
    readonly gnosisMainnet: "evm_gnosis_mainnet";
    readonly polygonMainnet: "evm_polygon_mainnet";
    readonly mantaPacificMainnet: "evm_manta_pacific_mainnet";
    readonly fantomMainnet: "evm_fantom_mainnet";
    readonly zksyncEraMainnet: "evm_zksync_era_mainnet";
    readonly confluxMainnet: "evm_conflux_mainnet";
    readonly dymensionMainnet: "evm_dymension_mainnet";
    readonly polygonZkevmMainnet: "evm_polygon_zkevm_mainnet";
    readonly seiMainnet: "evm_sei_mainnet";
    readonly reyaMainnet: "evm_reya_mainnet";
    readonly kavaMainnet: "evm_kava_mainnet";
    readonly merlinMainnet: "evm_merlin_mainnet";
    readonly mantleMainnet: "evm_mantle_mainnet";
    readonly zetaMainnet: "evm_zeta_mainnet";
    readonly cantoMainnet: "evm_canto_mainnet";
    readonly baseMainnet: "evm_base_mainnet";
    readonly ethereumHolesky: "evm_ethereum_holesky";
    readonly polygonMumbai: "evm_polygon_mumbai";
    readonly arbitrumMainnet: "evm_arbitrum_mainnet";
    readonly avalancheChain: "evm_avalanche_chain";
    readonly lineaMainnet: "evm_linea_mainnet";
    readonly blastMainnet: "evm_blast_mainnet";
    readonly arbitrumSepolia: "evm_arbitrum_sepolia";
    readonly scrollMainnet: "evm_scroll_mainnet";
    readonly xaiMainnet: "evm_xai_mainnet";
    readonly zklinkNovaMainnet: "evm_zklink_nova_mainnet";
    readonly ethereumSepolia: "evm_ethereum_sepolia";
};
type EvmChainUniqueId$1 = typeof EvmChainUniqueId$1[keyof typeof EvmChainUniqueId$1];

/**
 * Configuration for constructing a provider instance.
 *
 * Each instance manages a single address in a single chain.
 */
interface FordefiProviderConfig {
    /**
     * Chain ID as a number or a named chain.
     *
     * For example, assuming Ethereum Sepolia chain:
     * - Numeric value: `EvmChainId.NUMBER_11155111` or `11155111`
     * - Named chain: `EvmChainUniqueId.ethereumSepolia` or 'evm_ethereum_sepolia'.
     */
    chainId: EvmChainId$1 | EvmChainUniqueId$1;
    /**
     * EVM address of a Fordefi vault.
     *
     * For example: '0x1234567890123456789012345678901234567890'.
     */
    address: Address;
    /**
     * Fordefi API user token (base64 encoded) issued via the [Fordefi Web Console](https://app.fordefi.com/user-management).
     *
     * For example: 'eyJWthEAdEr.eyJwTPaYLoad.SiGNAtUrEBase64=='
     */
    apiUserToken: string;
    /**
     * Private key in PEM format used to sign the body of requests sent to the Fordefi API.
     * This is the content of the private `.pem` file. See [Create a public/private signature key pair for the API client](https://docs.fordefi.com/reference/pair-an-api-client-with-the-api-signer).
     *
     * Example of a private ECDSA `.pem` file:
     * ```
     * -----BEGIN EC PRIVATE KEY-----
     * PrivateKeyBase64==
     * -----END EC PRIVATE KEY-----
     * ```
     */
    apiPayloadSignKey: string;
    /**
     * Fallback JSON-RPC HTTP node URL.
     * Methods not implemented by this provider will pass through and be handled by this node.
     *
     * For example: 'https://rpc.sepolia.org'.
     */
    rpcUrl?: string;
    /**
     * Fordefi API base URL (used for development). Defaults to production API URL.
     *
     * For example: 'https://api.fordefi.com'.
     */
    apiBaseUrl?: string;
    /**
     * Whether to skip running a simulation before creating a new transaction, it blocks transaction creation if it fails. Defaults to true.
     */
    skipPrediction?: boolean;
}

/**
 * Helper to promisify waiting for given emitter's emitted event
 *
 * @param eventEmitter - instance of an {@link EventEmitter}
 */
declare const waitForEmittedEvent: (eventEmitter: EventEmitter) => <Event extends keyof EIP1193EventMap>(event: Event, timeoutMs?: number) => Promise<Parameters<EIP1193EventMap[Event]>[number]>;

/**
 * Web3 provider that implements [EIP-1193](https://eips.ethereum.org/EIPS/eip-1193).
 *
 * The provider automatically connects to Fordefi when a new instance is constructed, and emits a `connect` event once
 * both `chainId` and `address` were verified: chain is supported and address is managed by the given API user.
 * - To subscribe to [events](https://eips.ethereum.org/EIPS/eip-1193#events-1) pass a callback to `on('eventName', callbackFn)`.
 * - To get instead a promise that resolves once the event is emitted use the promisified helper `waitForEmittedEvent('eventName')`.
 *
 * NOTICE:
 * Make sure to subscribe to 'connect' immediately after creating a new instance, and before initiating any other
 * async operations, to avoid a race condition where the event is emitted before the listener is attached.
 *
 * For example:
 * ```ts
 * const provider = new FordefiWeb3Provider(config)
 *
 * const onConnect = ({ chainId }: ProviderConnectInfo) => {
 *   console.log(`Connected to chain ${chainId}`)
 * }
 *
 * // option 1: subscribe with a callback
 * provider.on('connect', onConnect)
 *
 * // option 2: act once a promise resolves
 * const result = await provider.waitForEmittedEvent('connect')
 * onConnect(result)
 * // or
 * provider
 *   .waitForEmittedEvent('connect')
 *   .then(onConnect)
 * ```
 *
 * Emitted events:
 * - `connect` - provider becomes connected.
 * - `disconnect` - provider becomes disconnected.
 * - `chainChanged` - emitted once during connection with the `chainId` you provided.
 * - `accountsChanged` - emitted once during connection with the `address` you provided.
 *
 * Interfaces of each event callback are described in {@link EIP1193EventCallbackParams} and [EIP1193EventMap](https://github.com/wevm/viem/blob/viem%402.9.29/src/types/eip1193.ts#L61-L67).
 *
 */
declare class FordefiWeb3Provider implements FordefiEIP1193Provider {
    readonly on: EIP1193Events['on'];
    readonly removeListener: EIP1193Events['removeListener'];
    readonly waitForEmittedEvent: ReturnType<typeof waitForEmittedEvent>;
    private readonly eventEmitter;
    private readonly apiClient;
    private readonly config;
    private chain;
    private vault;
    private status;
    constructor(config: FordefiProviderConfig);
    /**
     * Handles a JSON-RPC request
     *
     * @param args JSON-RPC request payload
     * @returns A promise with a response
     *
     * @throws RpcError with error codes defined in {@link RpcErrorCode} and {@link ProviderRpcErrorCode}
     */
    request<S extends RpcSchema = FordefiRpcSchema | NonFordefiRpcSchema, M extends S[number]['Method'] = S[number]['Method']>(args: RequestArgs<S, M>): Promise<MethodReturnType<S, M>>;
    private jsonRpcHttpRequestFn;
    private ethChainId;
    private ethAccounts;
    private ethSendTransaction;
    private ethSignTransaction;
    private personalSign;
    private ethSignTypedData;
    private _createEvmMessageTransaction;
    private _invokeCreateTransaction;
    private _getFordefiChainVault;
    private _throwIfNotConnected;
    /**
     * Connects the provider to Fordefi and emits a 'connect' event.
     * - If already connected, it does nothing.
     * - If connecting, waits for the connection to be established.
     *
     * @returns A promise that resolves once connected.
     */
    connect(): Promise<void>;
    /**
     * Disconnects the provider and emits a 'disconnect' event.
     */
    disconnect(): void;
    private _onDisconnect;
    /**
     * Returns the current status of the provider.
     *
     * @returns 'connected' if the provider is connected, 'connecting' if trying to connect, 'disconnected' otherwise.
     */
    getStatus(): ConnectivityStatus;
}

/** @enum */
declare const EvmChainId: {
    readonly NUMBER_1: 1;
    readonly NUMBER_5: 5;
    readonly NUMBER_10: 10;
    readonly NUMBER_16: 16;
    readonly NUMBER_56: 56;
    readonly NUMBER_100: 100;
    readonly NUMBER_137: 137;
    readonly NUMBER_169: 169;
    readonly NUMBER_250: 250;
    readonly NUMBER_324: 324;
    readonly NUMBER_1030: 1030;
    readonly NUMBER_1100: 1100;
    readonly NUMBER_1101: 1101;
    readonly NUMBER_1329: 1329;
    readonly NUMBER_1729: 1729;
    readonly NUMBER_2222: 2222;
    readonly NUMBER_4200: 4200;
    readonly NUMBER_5000: 5000;
    readonly NUMBER_7000: 7000;
    readonly NUMBER_7700: 7700;
    readonly NUMBER_8453: 8453;
    readonly NUMBER_17000: 17000;
    readonly NUMBER_80001: 80001;
    readonly NUMBER_42161: 42161;
    readonly NUMBER_43114: 43114;
    readonly NUMBER_59144: 59144;
    readonly NUMBER_81457: 81457;
    readonly NUMBER_421614: 421614;
    readonly NUMBER_534352: 534352;
    readonly NUMBER_660279: 660279;
    readonly NUMBER_810180: 810180;
    readonly NUMBER_11155111: 11155111;
};
/** @hidden */
type EvmChainId = EvmChainId$1;
/** @enum */
declare const EvmChainUniqueId: {
    readonly _1: "evm_1";
    readonly _5: "evm_5";
    readonly _10: "evm_10";
    readonly _16: "evm_16";
    readonly _56: "evm_56";
    readonly _100: "evm_100";
    readonly _137: "evm_137";
    readonly _169: "evm_169";
    readonly _250: "evm_250";
    readonly _324: "evm_324";
    readonly _1030: "evm_1030";
    readonly _1100: "evm_1100";
    readonly _1101: "evm_1101";
    readonly _1329: "evm_1329";
    readonly _1729: "evm_1729";
    readonly _2222: "evm_2222";
    readonly _4200: "evm_4200";
    readonly _5000: "evm_5000";
    readonly _7000: "evm_7000";
    readonly _7700: "evm_7700";
    readonly _8453: "evm_8453";
    readonly _17000: "evm_17000";
    readonly _80001: "evm_80001";
    readonly _42161: "evm_42161";
    readonly _43114: "evm_43114";
    readonly _59144: "evm_59144";
    readonly _81457: "evm_81457";
    readonly _421614: "evm_421614";
    readonly _534352: "evm_534352";
    readonly _660279: "evm_660279";
    readonly _810180: "evm_810180";
    readonly _11155111: "evm_11155111";
    readonly ethereumMainnet: "evm_ethereum_mainnet";
    readonly ethereumGoerli: "evm_ethereum_goerli";
    readonly optimismMainnet: "evm_optimism_mainnet";
    readonly flareTestnet: "evm_flare_testnet";
    readonly bscMainnet: "evm_bsc_mainnet";
    readonly gnosisMainnet: "evm_gnosis_mainnet";
    readonly polygonMainnet: "evm_polygon_mainnet";
    readonly mantaPacificMainnet: "evm_manta_pacific_mainnet";
    readonly fantomMainnet: "evm_fantom_mainnet";
    readonly zksyncEraMainnet: "evm_zksync_era_mainnet";
    readonly confluxMainnet: "evm_conflux_mainnet";
    readonly dymensionMainnet: "evm_dymension_mainnet";
    readonly polygonZkevmMainnet: "evm_polygon_zkevm_mainnet";
    readonly seiMainnet: "evm_sei_mainnet";
    readonly reyaMainnet: "evm_reya_mainnet";
    readonly kavaMainnet: "evm_kava_mainnet";
    readonly merlinMainnet: "evm_merlin_mainnet";
    readonly mantleMainnet: "evm_mantle_mainnet";
    readonly zetaMainnet: "evm_zeta_mainnet";
    readonly cantoMainnet: "evm_canto_mainnet";
    readonly baseMainnet: "evm_base_mainnet";
    readonly ethereumHolesky: "evm_ethereum_holesky";
    readonly polygonMumbai: "evm_polygon_mumbai";
    readonly arbitrumMainnet: "evm_arbitrum_mainnet";
    readonly avalancheChain: "evm_avalanche_chain";
    readonly lineaMainnet: "evm_linea_mainnet";
    readonly blastMainnet: "evm_blast_mainnet";
    readonly arbitrumSepolia: "evm_arbitrum_sepolia";
    readonly scrollMainnet: "evm_scroll_mainnet";
    readonly xaiMainnet: "evm_xai_mainnet";
    readonly zklinkNovaMainnet: "evm_zklink_nova_mainnet";
    readonly ethereumSepolia: "evm_ethereum_sepolia";
};
/** @hidden */
type EvmChainUniqueId = EvmChainUniqueId$1;

export { type ConnectivityStatus, type EIP1193EventCallbackParams, EvmChainId, EvmChainUniqueId, type FordefiMethodName, type FordefiProviderConfig, type FordefiRpcSchema, FordefiWeb3Provider, type MethodReturnType, type NonFordefiRpcSchema, type RequestArgs };
